import os
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

def generate_pdf(vulnerabilities, ServiceType, ServiceVersion):
    # Check if the Reports directory exists, if not, create it
    if not os.path.exists('Reports'):
        os.makedirs('Reports')

    # Create a PDF file
    pdf_filename = f"Reports/{ServiceType}_{ServiceVersion}_vulnerability_report.pdf"
    c = canvas.Canvas(pdf_filename, pagesize=letter)

    # Set font and font size
    c.setFont("Helvetica", 12)

    # Initialize Y position for drawing
    y_position = 775

    # Description text
    description = [
        "This report provides a comprehensive overview of security vulnerabilities detected in",
        "the deployed services. Vulnerabilities are identified based on the version information ",
        "provided for each service. Each vulnerability is categorized by its CVE ID (Common ",
        "Vulnerabilities and Exposures), severity level, and other pertinent details. ",
        "It is crucial to address these vulnerabilities promptly to ensure the security and ",
        "integrity of the system. Stay secure and keep your software up to date."
    ]
    
    # Calculate the height required for the description box
    description_height = (len(description) * 15) + 25

    # Draw box for description
    c.rect(50, y_position, 500, -description_height)
    c.setFont("Helvetica", 13)
    c.drawString(55, y_position - 15, "Description:")

    # Write description text
    for i, line in enumerate(description):
        c.drawString(55, y_position - 30 - (i * 15), line)

    # Adjust Y position after drawing description
    y_position -= description_height + 25

    if vulnerabilities:
        for vuln in vulnerabilities:
            # Draw CVE ID
            c.drawString(50, y_position, f"CVE ID: {vuln['id']}")
            y_position -= 20

            # Draw Summary
            summary_lines = wrap_text(c, f"Summary: {vuln['summary']}", 500)
            for line in summary_lines:
                # Check if the current line exceeds the available space on the page
                if y_position - 20 < 100:
                    c.showPage()
                    c.setFont("Helvetica", 12)
                    y_position = 750
                # Draw the current line
                c.drawString(50, y_position, line)
                y_position -= 20

            # Draw CVSS Score
            c.drawString(50, y_position, f"CVSS Score: {vuln['cvss_score']}")
            y_position -= 20

            # Draw Severity
            c.drawString(50, y_position, f"Severity: {vuln['severity']}")
            y_position -= 20

            # Draw Published Date
            c.drawString(50, y_position, f"Published Date: {vuln['published_date']}")
            y_position -= 20

            # Draw Access Vector
            c.drawString(50, y_position, f"Access Vector: {vuln['access_vector']}")
            y_position -= 20

            # Draw Authentication
            c.drawString(50, y_position, f"Authentication: {vuln['authentication']}")
            y_position -= 20

            # Draw Availability Impact
            c.drawString(50, y_position, f"Availability Impact: {vuln['availability_impact']}")
            y_position -= 20

            # Draw Confidentiality Impact
            c.drawString(50, y_position, f"Confidentiality Impact: {vuln['confidentiality_impact']}")
            y_position -= 20

            # Draw Integrity Impact
            c.drawString(50, y_position, f"Integrity Impact: {vuln['integrity_impact']}")
            y_position -= 40  # Add some space between entries

            # Check if we need to create a new page
            if y_position < 100:
                c.showPage()
                c.setFont("Helvetica", 12)
                y_position = 750

        # Closing note
        c.showPage()
        c.setFont("Helvetica-Bold", 16)
        c.drawString(50, 750, "Thank you for using our vulnerability scanner!")
        c.setFont("Helvetica", 12)
        c.drawString(50, 730, "Stay secure and keep your software up to date.")

    else:
        c.drawString(50, 750, "No vulnerabilities found for the specified version.")

    # Save the PDF
    c.save()
    print(f"PDF report saved as {pdf_filename}")

def wrap_text(c, text, max_width):
    lines = []
    words = text.split()
    current_line = words[0]
    for word in words[1:]:
        if c.stringWidth(current_line + " " + word, "Helvetica", 12) < max_width:
            current_line += " " + word
        else:
            lines.append(current_line)
            current_line = word
    lines.append(current_line)
    return lines
