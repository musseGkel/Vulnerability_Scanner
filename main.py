import json
from apacheVolnerabilityLookup import fetch_vulnerabilities, lookup_vulnerabilities
from generateReport import generate_pdf
from get_version import get_apache_version, get_mongodb_version, get_mysql_version, get_nginx_version, get_wordpress_version
from handleInput import parse_input_file


# Parse input data
try:
    services = parse_input_file('input.json')
    if not services:
        raise ValueError("Failed to parse the input data.")
    print("Successfully parsed and validated the input data:")
    print(services)
except Exception as e:
    print("Error parsing input data:", e)
    exit(1)

print("=====================================================")

# Function to retrieve service version
def get_service_version(service):
    service_type = service["service_type"].strip().lower()
    if service_type == "apache":
        return get_apache_version(service)
    elif service_type == "mysql":
        return get_mysql_version(service)
    elif service_type == "wordpress":
        return get_wordpress_version(service)
    elif service_type == "mongodb":
        return get_mongodb_version(service)
    else:
        print(f"Unsupported service type: {service_type}")
        return None
    
# Dictionary to store service versions
service_versions = {}

# Retrieve service versions
for service in services:
    version = get_service_version(service)
    if version is not None:
        service_type = service["service_type"].strip().lower()
        service_versions[service_type] = version  # Store service version in the dictionary
        print(f"{service['service_type']} version: {version}")
    else:
        print(f"Failed to retrieve {service['service_type']} version.")
        exit(1)  # Exit if any service version retrieval fails

print("=====================================================")

# Retrieve vulnerabilities and generate PDF report
for service_type, service_version in service_versions.items():
    vulnerabilities = lookup_vulnerabilities(service_type, service_version)
    if vulnerabilities:
        for vuln in vulnerabilities:
            print("=====================================================")
            print("CVE ID:", vuln['id'])
            print("Summary:", vuln['summary'])
            print("CVSS Score:", vuln['cvss_score'])
            print("Severity:", vuln['severity'])
            print("Published Date:", vuln['published_date'])
            # print("References:", vuln['references'])
            print("Access Vector:", vuln['access_vector'])
            print("Authentication:", vuln['authentication'])
            print("Availability Impact:", vuln['availability_impact'])
            print("Confidentiality Impact:", vuln['confidentiality_impact'])
            print("Integrity Impact:", vuln['integrity_impact'])
            print("=====================================================")
            print()
            generate_pdf(vulnerabilities, service_type, service_version)  # Assuming this function is defined elsewhere
    else:
        print("No vulnerabilities found for the specified version.")
