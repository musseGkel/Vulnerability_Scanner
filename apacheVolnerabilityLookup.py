# import nvdlib

# def lookup_vulnerabilities(service_type, service_version):
    # # # Fetch the NVD data
    # # nvd = nvdlib.updateCVE()

    # # Search for vulnerabilities related to the service type and version
    # cves = nvdlib.searchCVE(nvd, cpeName=f"{service_type}:{service_version}")

    # # Filter the results to only include relevant vulnerabilities
    # relevant_cves = [cve for cve in cves if service_version in cve.cpe]

    # # Format the output
    # vulnerabilities = [{'id': cve.id, 'summary': cve.summary} for cve in relevant_cves]

    # return vulnerabilities
#=====================================================================
# import nvdlib
# def lookup_vulnerabilities(service_type, service_version):
#     r = nvdlib.searchCPE(keywordSearch =service_type, limit = 2)
#     for eachCPE in r:
#         print(eachCPE.cpeName)
#=====================================================================

# import nvdlib
# import urllib.parse

# def lookup_vulnerabilities(service_type, service_version):
#     # Initialize the NVD database

#     # Escape the CPE name
#     escaped_cpe_name = urllib.parse.quote_plus(f"{service_type}"  , encoding='utf-8')
#                                                #:{service_version}",
                                              

#     # Search for vulnerabilities related to the service type and version
#     cves = nvdlib.searchCVE(cpeName=escaped_cpe_name)

#     # Filter the results to only include relevant vulnerabilities
#     relevant_cves = [cve for cve in cves if service_version in cve.cpe]

#     # Format the output
#     vulnerabilities = [{'id': cve.id, 'summary': cve.summary} for cve in relevant_cves]

#     return vulnerabilities

# # Example usage
# apache_vulnerabilities = lookup_vulnerabilities('apache', '2.4.59')
# print(apache_vulnerabilities)
#================================Available Properties=====================================
# import nvdlib
# def lookup_vulnerabilities(service_type, service_version):

#     # Search for CVEs related to a specific CPE name
#     cpe_name = "cpe:2.3:a:openssl:openssl:1.1.1h:*:*:*:*:*:*:*"
#     cves = nvdlib.searchCVE(cpeName=cpe_name)

#     # Print available properties for a sample CVE object
#     if cves:
#         sample_cve = cves[0]  # Taking the first CVE object as a sample
#         print("Available properties for CVE object:")
#         print(dir(sample_cve))
#     else:
#         print("No CVEs found for the provided CPE name.")

#================================Not Filtered=====================================
# import nvdlib


# def lookup_vulnerabilities(service_type, service_version):
#     # Construct the CPE name for the given service type and version
#     cpe_name = "cpe:2.3:a:openssl:openssl:1.1.1h:*:*:*:*:*:*:*"

#     # Search for vulnerabilities related to the service type and version
#     cves = nvdlib.searchCVE(cpeName=cpe_name)
#     # for cve in cves:
#     #  print(dir(cve))

#     # Format the output
#     vulnerabilities = [{'id': cve.id, 'summary': cve.descriptions} for cve in cves]

#     # print(vulnerabilities)

#     return vulnerabilities


#================================Filtered===========================================
import nvdlib

def lookup_vulnerabilities(service_type, service_version):
    # Construct the CPE name for the given service type and version
    print("service_type: "+service_type)
    print("service_version: "+service_version)
    cpe_name = f"cpe:2.3:a:{service_type}:{service_type}:{service_version}:*:*:*:*:*:*:*"
    # cpe_name= "cpe:2.3:a:apache:log4net:-:*:*:*:*:*:*:*"
    # cpe_name="cpe:2.3:a:apache:apache_test:-:*:*:*:*:*:*:*"
    # vendor = "Apache_Software_Foundation"  # Replace with the actual vendor name
    # product = service_type
    # cpe_name = f"cpe:2.3:a:{vendor}:{product}:{service_version}:*:*:*:*:*:*:*"
    # print("%%%%%%%%%%%%%%"+cpe_name)

    # Search for vulnerabilities related to the service type and version 
    cves = nvdlib.searchCVE(cpeName=cpe_name)

    # Format the output to include only CVE ID and summary for the specific CPE
    vulnerabilities = []
    for cve in cves:
        summary = cve.descriptions[0].value if cve.descriptions else "No description available"
        cvss_score = cve.score if cve.score else "N/A"
        cvss_score_formatted = f"CVSS Version: {cvss_score[0]}, Base Score: {cvss_score[1]}, Severity: {cvss_score[2]}"
        severity = cve.v2severity if hasattr(cve, 'v2severity') else "N/A"
        published_date = cve.published if cve.published else "N/A"
        references = cve.references if cve.references else []
        access_vector = cve.v2accessVector if hasattr(cve, 'v2accessVector') else "N/A"
        authentication = cve.v2authentication if hasattr(cve, 'v2authentication') else "N/A"
        availability_impact = cve.v2availabilityImpact if hasattr(cve, 'v2availabilityImpact') else "N/A"
        confidentiality_impact = cve.v2confidentialityImpact if hasattr(cve, 'v2confidentialityImpact') else "N/A"
        integrity_impact = cve.v2integrityImpact if hasattr(cve, 'v2integrityImpact') else "N/A"

        vulnerability_info = {
            'id': cve.id,
            'summary': summary,
            'cvss_score': cvss_score_formatted,
            'severity': severity,
            'published_date': published_date,
            'references': references,
            'access_vector': access_vector,
            'authentication': authentication,
            'availability_impact': availability_impact,
            'confidentiality_impact': confidentiality_impact,
            'integrity_impact': integrity_impact
        }
        vulnerabilities.append(vulnerability_info)


    return vulnerabilities


#================================CPE-keyword-Search===========================================

# import nvdlib

# def lookup_vulnerabilities(service_type, service_version):
#     r = nvdlib.searchCPE(keywordSearch = 'MySQL', limit = 2)
#     for eachCPE in r:
#         print(eachCPE.cpeName)

#================================fetch_vulnerabilities===========================================
import nvdlib

def fetch_vulnerabilities(service_type, service_version):
    # Construct the CPE name for the given service type and version
    cpe_name = f"cpe:2.3:a:{service_type}:{service_type}:{service_version}:*:*:*:*:*:*:*"

    # Search for vulnerabilities related to the service type and version
    cves = nvdlib.searchCVE(cpeName=cpe_name)

    # Format the output to include relevant vulnerability information
    vulnerabilities = []
    for cve in cves:
        summary = cve.descriptions[0].value if cve.descriptions else "No description available"
        cvss_score = cve.score if cve.score else "N/A"
        cvss_score_formatted = f"CVSS Version: {cvss_score[0]}, Base Score: {cvss_score[1]}, Severity: {cvss_score[2]}"
        severity = cve.v2severity if hasattr(cve, 'v2severity') else "N/A"
        published_date = cve.published if cve.published else "N/A"
        references = cve.references if cve.references else []
        access_vector = cve.v2accessVector if hasattr(cve, 'v2accessVector') else "N/A"
        authentication = cve.v2authentication if hasattr(cve, 'v2authentication') else "N/A"
        availability_impact = cve.v2availabilityImpact if hasattr(cve, 'v2availabilityImpact') else "N/A"
        confidentiality_impact = cve.v2confidentialityImpact if hasattr(cve, 'v2confidentialityImpact') else "N/A"
        integrity_impact = cve.v2integrityImpact if hasattr(cve, 'v2integrityImpact') else "N/A"

        vulnerability_info = {
            'id': cve.id,
            'summary': summary,
            'cvss_score': cvss_score_formatted,
            'severity': severity,
            'published_date': published_date,
            'references': references,
            'access_vector': access_vector,
            'authentication': authentication,
            'availability_impact': availability_impact,
            'confidentiality_impact': confidentiality_impact,
            'integrity_impact': integrity_impact
        }
        vulnerabilities.append(vulnerability_info)

    return vulnerabilities

