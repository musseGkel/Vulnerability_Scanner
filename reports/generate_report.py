import os
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

def generate_pdf(vulnerabilities, ServiceType, ServiceVersion):
    # Check if the Reports directory exists, if not, create it
    if not os.path.exists('reports'):
        os.makedirs('reports')

    # Create a PDF file
    pdf_filename = f"reports/{ServiceType}_{ServiceVersion}_vulnerability_report.pdf"
    c = canvas.Canvas(pdf_filename, pagesize=letter)

    # Set title font to bold and size to 18
    c.setFont("Helvetica-Bold", 18)
    # Draw the title at the top of the page
    c.drawString(50, 760, f"Vulnerability Scanner Report For {ServiceType} {ServiceVersion}")  # Adjusted y_position for the title

    # Reset font for the rest of the page
    c.setFont("Helvetica", 12)

    # Description text
    description = [
        
        f"Report Overview: This report offers a comprehensive analysis of security vulnerabilities detected within the {ServiceType} service, version {ServiceVersion}. Each vulnerability is meticulously categorized by its CVE ID (Common Vulnerabilities and Exposures), severity level, and relevant details extracted from version information provided for the {ServiceType} service.",
        f"Importance of Action: Prompt attention to these vulnerabilities is imperative to uphold the security and integrity of the {ServiceType} {ServiceVersion} deployment. Failure to address them in a timely manner may leave the system susceptible to exploitation, potentially compromising sensitive data and system functionality.",
        "Key Details Provided:",
        "**CVE ID**: Unique identifier assigned to each vulnerability, facilitating precise identification and reference.",
        "**Summary**: A succinct description of the vulnerability and its potential impact on system security.",
        "**CVSS Score**: A standardized measure of vulnerability severity, aiding in prioritization of remediation efforts.",
        "**Published Date**: Timestamp indicating when the vulnerability was officially documented, offering insights into its age and potential exposure duration.",
        "**Impact Assessment**: Detailed assessment of the vulnerability's potential impact on system availability, confidentiality, and integrity, providing clarity on its severity and urgency for mitigation.",
        # f"Key Details Provided: - CVE ID: Unique identifier assigned to each vulnerability, facilitating precise identification and reference. - Summary: A succinct description of the vulnerability and its potential impact on system security. - CVSS Score: A standardized measure of vulnerability severity, aiding in prioritization of remediation efforts. - Published Date: Timestamp indicating when the vulnerability was officially documented, offering insights into its age and potential exposure duration. - Impact Assessment: Detailed assessment of the vulnerability's potential impact on system availability, confidentiality, and integrity, providing clarity on its severity and urgency for mitigation.",
        f"Proactive Measures: To mitigate risks effectively, it is recommended to promptly address identified vulnerabilities by applying relevant patches, updates, or configuration changes. By staying proactive in vulnerability management practices, you can bolster the resilience of your {ServiceType} {ServiceVersion} deployment against potential threats and ensure continued operational security.",
        f"Stay Secure, Stay Vigilant: In an ever-evolving threat landscape, maintaining vigilance and staying informed about emerging vulnerabilities is crucial. Regular vulnerability assessments and proactive security measures are essential components of a robust cybersecurity strategy. Together, let's fortify your {ServiceType} {ServiceVersion} deployment's defenses and safeguard against potential exploits.",
        ""
    ]

    # Draw description text
    y_position = 730  # Adjusted starting y_position for the description text
    for paragraph in description:
        lines = wrap_text(c, paragraph, 500)
        for line in lines:
            c.drawString(50, y_position, line)
            y_position -= 20
        y_position -= 10  # Add some space between paragraphs
    if vulnerabilities:
        for vuln in vulnerabilities:
            # Check if we need to create a new page
            if y_position < 100:  # Threshold for the bottom of the page
                c.showPage()
                c.setFont("Helvetica", 12)
                y_position = 750  # Reset y_position to the top of the new page

            # Add separator at the top of detail
            c.setFont("Helvetica", 12)  # Set font size and style
            c.drawString(50, y_position, "================================================================")
            y_position -= 20

            # Draw CVE ID
            c.drawString(50, y_position, f"CVE ID: {vuln['id']}")
            y_position -= 20

            # Draw Summary
            summary_lines = wrap_text(c, f"Summary: {vuln['summary']}", 500)
            for line in summary_lines:
                # Check if the current line exceeds the available space on the page
                if y_position - 20 < 100:
                    c.showPage()
                    c.setFont("Helvetica", 12)
                    y_position = 750
                # Draw the current line
                c.setFont("Helvetica", 12)  # Set font size and style
                c.drawString(50, y_position, line)
                y_position -= 20

            # Draw CVSS Score
            c.drawString(50, y_position, f"CVSS Score: {vuln['cvss_score']}")
            y_position -= 20

            # Draw Severity
            c.drawString(50, y_position, f"Severity: {vuln['severity']}")
            y_position -= 20

            # Draw Published Date
            c.drawString(50, y_position, f"Published Date: {vuln['published_date']}")
            y_position -= 20

            # Draw Access Vector
            c.drawString(50, y_position, f"Access Vector: {vuln['access_vector']}")
            y_position -= 20

            # Draw Authentication
            c.drawString(50, y_position, f"Authentication: {vuln['authentication']}")
            y_position -= 20

            # Draw Availability Impact
            c.drawString(50, y_position, f"Availability Impact: {vuln['availability_impact']}")
            y_position -= 20

            # Draw Confidentiality Impact
            c.drawString(50, y_position, f"Confidentiality Impact: {vuln['confidentiality_impact']}")
            y_position -= 20

            # Draw Integrity Impact
            c.drawString(50, y_position, f"Integrity Impact: {vuln['integrity_impact']}")
            y_position -= 20

            # Add separator at the bottom of detail
            c.setFont("Helvetica", 12)  # Set font size and style
            c.drawString(50, y_position, "================================================================")
            y_position -= 20  # Add some space between entries
            
            # Check if we need to create a new page
            if y_position < 100:
                c.showPage()
                c.setFont("Helvetica", 12)
                y_position = 750

        # Closing note
        c.showPage()
        c.setFont("Helvetica-Bold", 16)
        c.drawString(50, 750, "Thank you for using our vulnerability scanner!")
        c.setFont("Helvetica", 12)
        c.drawString(50, 730, "Stay secure and keep your software up to date.")

    else:
        c.drawString(50, 750, "No vulnerabilities found for the specified version.")

    # Save the PDF
    c.save()
    print(f"PDF report saved as {pdf_filename}")

def wrap_text(c, text, max_width):
    lines = []
    words = text.split()
    if not words:  # Check if the words list is empty
        return lines  # Return an empty list of lines if there are no words

    current_line = words[0]
    for word in words[1:]:
        if c.stringWidth(current_line + " " + word, "Helvetica", 12) < max_width:
            current_line += " " + word
        else:
            lines.append(current_line)
            current_line = word
    lines.append(current_line)
    return lines
