# import subprocess

# def get_container_running_service_version(container_name):
#     try:
#         # The command to get the Apache version inside the Docker container
#         cmd = f"docker exec {container_name} httpd -v"
        
#         # Run the command and capture the output
#         result = subprocess.run(cmd, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
#         # Decode the output from bytes to string
#         output = result.stdout.decode('utf-8')
        
#         # Extract the version number from the output
#         version_line = next((line for line in output.split('\n') if "Server version" in line), None)
#         if version_line:
#             # The version info is usually in the format: "Server version: Apache/X.X.XX (Unix)"
#             version_info = version_line.split(': ')[1]
#             return version_info
#         else:
#             return "Version information not found."
#     except subprocess.CalledProcessError as e:
#         print(f"An error occurred while trying to get the Apache version: {e.output.decode('utf-8')}")

import subprocess
import json

def get_running_service_version(container_name, service_type):
    try:
        # Define the command based on the service type
        if service_type == "Apache":
            cmd = f"docker exec {container_name} httpd -v"
        elif service_type == "MySQL":
            cmd = f"docker exec {container_name} mysql --version"
        elif service_type == "WordPress":
            # WordPress version is usually defined in the version.php file
            cmd = f"docker exec {container_name} cat wp-includes/version.php"
        else:
            return f"Unsupported service type: {service_type}"
        
        # Run the command and capture the output
        result = subprocess.run(cmd, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        # Decode the output from bytes to string
        output = result.stdout.decode('utf-8')
        
        # Extract the version number from the output
        if service_type == "WordPress":
            # Look for the line that defines the $wp_version variable
            version_line = next((line for line in output.split('\n') if "$wp_version =" in line), None)
            if version_line:
                # Extract the version number from the line
                version_info = version_line.split('=')[1].strip().strip("';")
                return f"Service type: {service_type}, Service version: {version_info}"
            else:
                return "Version information not found."
        elif service_type == "MySQL":
            # The command to get the MySQL version might vary based on the MySQL image used
            cmd = f"docker exec {container_name} mysql --version"
            # Run the command and capture the output
            result = subprocess.run(cmd, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            # Decode the output from bytes to string
            output = result.stdout.decode('utf-8')
            # MySQL version info is usually in the format: "mysql  Ver 15.1 Distrib 10.4.13-MariaDB, for debian-linux-gnu (x86_64) using readline 5.2"
            version_line = next((line for line in output.split('\n') if "Ver" in line), None)
            if version_line:
                # Extract the version number from the line
                version_info = ' '.join(version_line.split()[:3])  # This will extract something like "mysql Ver 15.1"
                return f"Service type: {service_type}, Service version: {version_info}"
            else:
                return "Version information not found."
        else:
            version_line = next((line for line in output.split('\n') if "version" in line), None)
            if version_line:
                version_info = version_line.split(': ')[1]
                return f"Service type: {service_type}, Service version: {version_info}"
            else:
                return "Version information not found."
    except subprocess.CalledProcessError as e:
        print(f"An error occurred while trying to get the {service_type} version: {e.output.decode('utf-8')}")


